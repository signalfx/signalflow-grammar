/**
 * Copyright (C) 2016 SignalFx, Inc.
 */
lexer grammar SignalFlowV2Lexer;

###LEXER_MEMBERS###
DEF
  : 'def'
  ;

RETURN
  : 'return'
  ;

RAISE
  : 'raise'
  ;

FROM
  : 'from'
  ;

IMPORT
  : 'import'
  ;

AS
  : 'as'
  ;

GLOBAL
  : 'global'
  ;

NONLOCAL
  : 'nonlocal'
  ;

ASSERT
  : 'assert'
  ;

IF
  : 'if'
  ;

ELIF
  : 'elif'
  ;

ELSE
  : 'else'
  ;

WHILE
  : 'while'
  ;

FOR
  : 'for'
  ;

IN
  : 'in'
  ;

TRY
  : 'try'
  ;

FINALLY
  : 'finally'
  ;

WITH
  : 'with'
  ;

EXCEPT
  : 'except'
  ;

LAMBDA
  : 'lambda'
  ;

OR
  : 'or'
  ;

AND
  : 'and'
  ;

NOT
  : 'not'
  ;

IS
  : 'is'
  ;

NONE
  : 'None'
  ;

TRUE
  : 'True'
  ;

FALSE
  : 'False'
  ;
CLASS
  : 'class'
  ;

YIELD
  : 'yield'
  ;

DEL
  : 'del'
  ;

PASS
  : 'pass'
  ;

CONTINUE
  : 'continue'
  ;

BREAK
  : 'break'
  ;

###NEWLINE###

ID
  : [a-zA-Z_][a-zA-Z0-9_]*
  ;

STRING
  : '\'' (ESCAPE_SEQ | ~( '\'' | '\\' | '\r' | '\n'))* '\''
  | '"' (ESCAPE_SEQ | ~( '"' | '\\' | '\r' | '\n'))* '"'
  ;

LONG_STRING
 : '\'\'\'' LONG_STRING_ITEM*? '\'\'\''
 | '"""' LONG_STRING_ITEM*? '"""'
 ;

fragment LONG_STRING_ITEM
 : LONG_STRING_CHAR
 | ESCAPE_SEQ
 ;

fragment LONG_STRING_CHAR
 : ~'\\'
 ;

INT
  : [0-9]+
  ;

FLOAT
  : [0-9]* '.'? [0-9]+ ([eE][+-]?[0-9]+)?
  ;

fragment
ESCAPE_SEQ
  : '\\' ([btnfr] | '\"' | '\'' | '\\' | [0-3][0-7][0-7] | [0-7][0-7] | [0-7])
  ;

DOT
  : '.'
  ;

ELLIPSE
  : '...'
  ;

STAR
  : '*'
  ;

###PARENS###

COMMA
  : ','
  ;

COLON
  : ':'
  ;

SEMICOLON
  : ';'
  ;

POWER
  : '**'
  ;

ASSIGN
  : '='
  ;

###BRACKETS###

OR_OP
  : '|'
  ;

XOR
  : '^'
  ;

AND_OP
  : '&'
  ;

LEFT_SHIFT
  : '<<'
  ;

RIGHT_SHIFT
  : '>>'
  ;

ADD
  : '+'
  ;

MINUS
  : '-'
  ;

DIV
  : '/'
  ;

NOT_OP
  : '~'
  ;

###BRACES###

LESS_THAN
  : '<'
  ;

GREATER_THAN
  : '>'
  ;

EQUALS
  : '=='
  ;

GT_EQ
  : '>='
  ;

LT_EQ
  : '<='
  ;

NOT_EQ_1
  : '<>'
  ;

NOT_EQ_2
  : '!='
  ;

AT
 : '@'
 ;

ARROW
 : '->'
 ;

fragment SPACES
  : [ \t]+
  ;

SKIP_
  : ( SPACES | LINE_JOINING ) -> skip
  ;

COMMENT
  : '#' ~[\r\n]* -> channel(1)
  ;

fragment LINE_JOINING
  : '\\' SPACES? ( '\r'? '\n' | '\r' )
  ;

